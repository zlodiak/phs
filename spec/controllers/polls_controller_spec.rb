require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PollsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Poll. As you add validations to Poll, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      id: 1,
      created_at: nil,
      updated_at: nil,
      user_id: 1,
      title: "title1",
      description: "Fuga aut quis assumenda. Voluptas impedit fugiat iusto possimus. Molestias officiis omnis delectus. Omnis vel quisquam. Est doloribus minima ducimus excepturi libero. Asperiores laboriosam enim labore quo id iure. Quas libero facere. Eius occaecati culpa magnam vero natus."
    }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PollsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    before :each do
      @poll = FactoryGirl.create(:poll)
    end

    it "assigns all polls as @polls" do      
      get :index, user_id: @poll.user_id
      expect(assigns(:polls)).to eq([@poll])
    end

    it "assigns user as @user" do
      @user = User.find(@poll.id)
      get :index, user_id: @poll.user_id
      expect(assigns(:user)).to eq(@user)
    end  

    it "redirects to the index view" do
      get :index, user_id: @poll.user_id
      expect(response).to render_template("index")
    end      
  end

=begin
  describe "GET #show" do
    it "assigns the requested poll as @poll" do
      poll = Poll.create! valid_attributes
      get :show, {:id => poll.to_param}, valid_session
      expect(assigns(:poll)).to eq(poll)
    end
  end

  describe "GET #new" do
    it "assigns a new poll as @poll" do
      get :new, {}, valid_session
      expect(assigns(:poll)).to be_a_new(Poll)
    end
  end

  describe "GET #edit" do
    it "assigns the requested poll as @poll" do
      poll = Poll.create! valid_attributes
      get :edit, {:id => poll.to_param}, valid_session
      expect(assigns(:poll)).to eq(poll)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Poll" do
        expect {
          post :create, {:poll => valid_attributes}, valid_session
        }.to change(Poll, :count).by(1)
      end

      it "assigns a newly created poll as @poll" do
        post :create, {:poll => valid_attributes}, valid_session
        expect(assigns(:poll)).to be_a(Poll)
        expect(assigns(:poll)).to be_persisted
      end

      it "redirects to the created poll" do
        post :create, {:poll => valid_attributes}, valid_session
        expect(response).to redirect_to(Poll.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved poll as @poll" do
        post :create, {:poll => invalid_attributes}, valid_session
        expect(assigns(:poll)).to be_a_new(Poll)
      end

      it "re-renders the 'new' template" do
        post :create, {:poll => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested poll" do
        poll = Poll.create! valid_attributes
        put :update, {:id => poll.to_param, :poll => new_attributes}, valid_session
        poll.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested poll as @poll" do
        poll = Poll.create! valid_attributes
        put :update, {:id => poll.to_param, :poll => valid_attributes}, valid_session
        expect(assigns(:poll)).to eq(poll)
      end

      it "redirects to the poll" do
        poll = Poll.create! valid_attributes
        put :update, {:id => poll.to_param, :poll => valid_attributes}, valid_session
        expect(response).to redirect_to(poll)
      end
    end

    context "with invalid params" do
      it "assigns the poll as @poll" do
        poll = Poll.create! valid_attributes
        put :update, {:id => poll.to_param, :poll => invalid_attributes}, valid_session
        expect(assigns(:poll)).to eq(poll)
      end

      it "re-renders the 'edit' template" do
        poll = Poll.create! valid_attributes
        put :update, {:id => poll.to_param, :poll => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested poll" do
      poll = Poll.create! valid_attributes
      expect {
        delete :destroy, {:id => poll.to_param}, valid_session
      }.to change(Poll, :count).by(-1)
    end

    it "redirects to the polls list" do
      poll = Poll.create! valid_attributes
      delete :destroy, {:id => poll.to_param}, valid_session
      expect(response).to redirect_to(polls_url)
    end
  end
=end

end
